import logging
from datetime import datetime

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

import matplotlib.pyplot as plt
from io import BytesIO

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –¢–æ–∫–µ–Ω –æ—Ç BotFather
TOKEN = '7758120985:AAHOid2LvrvC2-u4kZdhnifQTLMcybn_e0o'

# –ë–∞–∑–æ–≤—ã–µ –≥—Ä—É–ø–ø—ã –º—ã—à—Ü
MUSCLE_GROUPS = {
    "back": "–°–ø–∏–Ω–∞",
    "chest": "–ì—Ä—É–¥—å",
    "legs": "–ù–æ–≥–∏",
    "arms": "–†—É–∫–∏",
    "shoulders": "–ü–ª–µ—á–∏",
    "abs": "–ü—Ä–µ—Å—Å"
}

# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø –º—ã—à—Ü
DEFAULT_EXERCISES = {
    "back": ["–ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è", "–¢—è–≥–∞ —à—Ç–∞–Ω–≥–∏", "–¢—è–≥–∞ –≥–∞–Ω—Ç–µ–ª–∏"],
    "chest": ["–ñ–∏–º —à—Ç–∞–Ω–≥–∏", "–ñ–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π", "–†–∞–∑–≤–æ–¥–∫–∞ –≥–∞–Ω—Ç–µ–ª–µ–π"],
    "legs": ["–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è", "–°—Ç–∞–Ω–æ–≤–∞—è —Ç—è–≥–∞", "–í—ã–ø–∞–¥—ã"],
    "arms": ["–ñ–∏–º —à—Ç–∞–Ω–≥–∏ —É–∑–∫–∏–º —Ö–≤–∞—Ç–æ–º", "–ü–æ–¥—ä–µ–º –≥–∞–Ω—Ç–µ–ª–µ–π –Ω–∞ –±–∏—Ü–µ–ø—Å", "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π –∂–∏–º"],
    "shoulders": ["–ñ–∏–º –ê—Ä–Ω–æ–ª—å–¥–∞", "–ú–∞—Ö–∏ –≥–∞–Ω—Ç–µ–ª—è–º–∏", "–ü–æ–¥—ä–µ–º –ø–µ—Ä–µ–¥–Ω–∏—Ö –¥–µ–ª—å—Ç"],
    "abs": ["–°–∫—Ä—É—á–∏–≤–∞–Ω–∏—è", "–ü–ª–∞–Ω–∫–∞", "–û–±—Ä–∞—Ç–Ω—ã–µ —Å–∫—Ä—É—á–∏–≤–∞–Ω–∏—è"]
}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ)
user_data_storage = {}  # user_id -> {history: [...], current_workout: {...}, mode: ... }

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def main_menu_keyboard():
    keyboard = [
        [KeyboardButton("üèãÔ∏è‚Äç‚ôÇÔ∏è –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")],
        [KeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫")],
        [KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_data(user_id):
    if user_id not in user_data_storage:
        user_data_storage[user_id] = {"history": [], "current_workout": None, "mode": None}
    return user_data_storage[user_id]

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –±–æ—Ç! üèãÔ∏è\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu_keyboard()
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º
def get_exercise_stats(user_data):
    stats = {}
    for workout in user_data["history"]:
        for ex in workout["exercises"]:
            name = ex["name"]
            if name not in stats:
                stats[name] = []
            stats[name].append({
                "date": workout["date"],
                "sets": ex["sets"],
                "reps": ex["reps"],
                "weight": ex["weight"]
            })
    return stats

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_id = update.effective_user.id
    user_data = get_user_data(user_id)

    if text == "üèãÔ∏è‚Äç‚ôÇÔ∏è –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É":
        keyboard = [[KeyboardButton(group)] for group in MUSCLE_GROUPS.values()]
        keyboard.append([KeyboardButton("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")])
        keyboard.append([KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")])
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –º—ã—à—Ü:",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        return

    elif text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await update.message.reply_text("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu_keyboard())
        user_data["current_workout"] = None
        return

    elif text == "üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É":
        if user_data["current_workout"] and user_data["current_workout"]["exercises"]:
            workout = user_data["current_workout"]
            workout["date"] = datetime.now()
            user_data["history"].append(workout)
        user_data["current_workout"] = None
        await update.message.reply_text("‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=main_menu_keyboard())
        return

    elif text == "üìú –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫":
        history = user_data["history"]
        if not history:
            await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö.")
            return
        msg = "üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:\n\n"
        for i, workout in enumerate(history[-100:], 1):
            date_str = workout["date"].strftime("%d.%m.%Y %H:%M")
            msg += f"{i}. üí™ {workout['group']}\nüóì {date_str}\n"
            for ex in workout["exercises"]:
                msg += f" - {ex['name']} | {ex['sets']} —Å–µ—Ç–æ–≤ √ó {ex['reps']} –ø–æ–≤—Ç. @ {ex['weight']} –∫–≥\n"
            msg += "\n"

        await update.message.reply_text(msg, reply_markup=main_menu_keyboard())
        return

    elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞":
        stats = get_exercise_stats(user_data)
        if not stats:
            await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.", reply_markup=main_menu_keyboard())
            return

        user_data["mode"] = "stats_choose_exercise"
        keyboard = [[KeyboardButton(ex)] for ex in stats.keys()]
        keyboard.append([KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")])
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
        return

    elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        user_data["mode"] = None
        await update.message.reply_text("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_keyboard())
        return

    # –í—ã–±–æ—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    if user_data.get("mode") == "stats_choose_exercise":
        stats = get_exercise_stats(user_data)
        if text in stats:
            exercises = stats[text]
            dates = [ex["date"] for ex in exercises]
            weights = [ex["weight"] for ex in exercises]

            # –ì—Ä–∞—Ñ–∏–∫
            plt.figure(figsize=(10, 4))
            plt.plot(dates, weights, marker='o', linestyle='-')
            plt.title(f'–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é "{text}"')
            plt.xlabel('–î–∞—Ç–∞')
            plt.ylabel('–í–µ—Å (–∫–≥)')
            plt.grid(True)
            plt.xticks(rotation=45)
            plt.tight_layout()

            buf = BytesIO()
            plt.savefig(buf, format='png')
            plt.close()
            buf.seek(0)

            # –¢–µ–∫—Å—Ç–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            max_weight = max(weights)
            avg_weight = sum(weights) / len(weights)
            total_sets = sum(ex["sets"] for ex in exercises)

            stats_text = (
                f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é '{text}':\n"
                f"üìå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å: {max_weight} –∫–≥\n"
                f"üìå –°—Ä–µ–¥–Ω–∏–π –≤–µ—Å: {avg_weight:.1f} –∫–≥\n"
                f"üìå –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ö–æ–¥–æ–≤: {total_sets}"
            )

            await update.message.reply_photo(photo=buf, caption=stats_text)
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚¨ÖÔ∏è –ù–∞–∑–∞–¥'.")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –º—ã—à—Ü
    muscle_group = next((key for key, val in MUSCLE_GROUPS.items() if val == text), None)
    if muscle_group:
        exercises = DEFAULT_EXERCISES[muscle_group]
        keyboard = [[KeyboardButton(ex)] for ex in exercises]
        keyboard.append([KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—ë —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ")])
        keyboard.append([KeyboardButton("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")])
        keyboard.append([KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")])

        if user_data["current_workout"] is None:
            user_data["current_workout"] = {
                "group": MUSCLE_GROUPS[muscle_group],
                "exercises": [],
                "muscle_key": muscle_group
            }
        else:
            user_data["current_workout"]["group"] = MUSCLE_GROUPS[muscle_group]
            user_data["current_workout"]["muscle_key"] = muscle_group

        await update.message.reply_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–∞ {text}:",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        return

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–≤–æ–µ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    if text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—ë —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:")
        return
# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    if user_data["current_workout"] and "new_exercise" not in user_data["current_workout"]:
        user_data["current_workout"]["new_exercise"] = text
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ö–æ–¥–æ–≤:")
        return

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥—Ö–æ–¥–æ–≤
    if user_data["current_workout"] and "new_exercise" in user_data["current_workout"] and "sets" not in user_data["current_workout"]:
        try:
            sets = int(text)
            user_data["current_workout"]["sets"] = sets
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π:")
        except ValueError:
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        return

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
    if user_data["current_workout"] and "new_exercise" in user_data["current_workout"] and "reps" not in user_data["current_workout"]:
        try:
            reps = int(text)
            user_data["current_workout"]["reps"] = reps
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å (–≤ –∫–≥):")
        except ValueError:
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        return

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–µ—Å–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç –∫ –≥—Ä—É–ø–ø–µ –º—ã—à—Ü
    if user_data["current_workout"] and "new_exercise" in user_data["current_workout"] and "weight" not in user_data["current_workout"]:
        try:
            weight = float(text)
            user_data["current_workout"]["weight"] = weight

            user_data["current_workout"]["exercises"].append({
                "name": user_data["current_workout"]["new_exercise"],
                "sets": user_data["current_workout"]["sets"],
                "reps": user_data["current_workout"]["reps"],
                "weight": user_data["current_workout"]["weight"]
            })

            del user_data["current_workout"]["new_exercise"]
            del user_data["current_workout"]["sets"]
            del user_data["current_workout"]["reps"]
            del user_data["current_workout"]["weight"]

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –≤—ã–±–æ—Ä—É –≥—Ä—É–ø–ø—ã –º—ã—à—Ü —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            keyboard = [[KeyboardButton(group)] for group in MUSCLE_GROUPS.values()]
            keyboard.append([KeyboardButton("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")])
            keyboard.append([KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")])
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –º—ã—à—Ü:",
                reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            )
        except ValueError:
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
    if user_data["current_workout"] and "muscle_key" in user_data["current_workout"]:
        muscle_key = user_data["current_workout"]["muscle_key"]
        if text in DEFAULT_EXERCISES[muscle_key]:
            await update.message.reply_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {text}")
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ö–æ–¥–æ–≤:")
            user_data["current_workout"]["new_exercise"] = text
            return

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    application = ApplicationBuilder().token(TOKEN).build()

    application.add_handler(CommandHandler('start', start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()
