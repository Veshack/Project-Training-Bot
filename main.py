import logging
import sqlite3
from datetime import datetime
from typing import Dict, List, Optional

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

import matplotlib.pyplot as plt
from io import BytesIO

class Database:
    def __init__(self, db_name='workout_bot.db'):
        self.conn = sqlite3.connect(db_name)
        self.create_tables()

    def create_tables(self):
        cursor = self.conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS workouts (
            workout_id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            muscle_group TEXT,
            workout_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users (user_id)
        )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS exercises (
            exercise_id INTEGER PRIMARY KEY AUTOINCREMENT,
            workout_id INTEGER,
            name TEXT,
            sets INTEGER,
            reps INTEGER,
            weight REAL,
            FOREIGN KEY (workout_id) REFERENCES workouts (workout_id)
        )
        ''')
        
        self.conn.commit()

    def save_workout(self, user_id, username, muscle_group, exercises):
        cursor = self.conn.cursor()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω)
        cursor.execute(
            'INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)',
            (user_id, username)
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
        cursor.execute(
            'INSERT INTO workouts (user_id, muscle_group) VALUES (?, ?)',
            (user_id, muscle_group)
        )
        workout_id = cursor.lastrowid
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
        for ex in exercises:
            cursor.execute(
                '''INSERT INTO exercises 
                (workout_id, name, sets, reps, weight) 
                VALUES (?, ?, ?, ?, ?)''',
                (workout_id, ex['name'], ex['sets'], ex['reps'], ex['weight'])
            )
        
        self.conn.commit()

    def get_user_history(self, user_id, limit=100):
        cursor = self.conn.cursor()
        cursor.execute('''
            SELECT w.workout_id, w.muscle_group, w.workout_date,
                   e.name, e.sets, e.reps, e.weight
            FROM workouts w
            JOIN exercises e ON w.workout_id = e.workout_id
            WHERE w.user_id = ?
            ORDER BY w.workout_date DESC
            LIMIT ?
        ''', (user_id, limit))
        return cursor.fetchall()

    def get_exercise_stats(self, user_id, exercise_name):
        cursor = self.conn.cursor()
        cursor.execute('''
            SELECT w.workout_date, e.weight
            FROM exercises e
            JOIN workouts w ON e.workout_id = w.workout_id
            WHERE w.user_id = ? AND e.name = ?
            ORDER BY w.workout_date
        ''', (user_id, exercise_name))
        return cursor.fetchall()

    def close(self):
        self.conn.close()
        
class Exercise:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"""
    def __init__(self, name: str, sets: int, reps: int, weight: float):
        """
        @brief –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞—Å—Å–∞ Exercise
        @param name: –ù–∞–∑–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
        @param sets: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ö–æ–¥–æ–≤
        @param reps: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
        @param weight: –í–µ—Å (–∫–≥)
        """
        self.name = name
        self.sets = sets
        self.reps = reps
        self.weight = weight


class WeightExercise(Exercise):
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π —Å –≤–µ—Å–æ–º"""
    def __init__(self, name: str, sets: int, reps: int, weight: float):
        """
        @brief –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞—Å—Å–∞ WeightExercise
        @inheritDoc Exercise
        """
        super().__init__(name, sets, reps, weight)


class BodyweightExercise(Exercise):
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –≤–µ—Å–æ–º"""
    def __init__(self, name: str, sets: int, reps: int):
        """
        @brief –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞—Å—Å–∞ BodyweightExercise
        @param name: –ù–∞–∑–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
        @param sets: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ö–æ–¥–æ–≤
        @param reps: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
        """
        super().__init__(name, sets, reps, 0)  # –í–µ—Å = 0 –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –≤–µ—Å–æ–º


class WorkoutBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–≥–æ –±–æ—Ç–∞"""
    def __init__(self, token: str):
        self.token = token
        self.db = Database()
        
        # –ë–∞–∑–æ–≤—ã–µ –≥—Ä—É–ø–ø—ã –º—ã—à—Ü
        self.MUSCLE_GROUPS = {
            "back": "–°–ø–∏–Ω–∞",
            "chest": "–ì—Ä—É–¥—å",
            "legs": "–ù–æ–≥–∏",
            "arms": "–†—É–∫–∏",
            "shoulders": "–ü–ª–µ—á–∏",
            "abs": "–ü—Ä–µ—Å—Å"
        }
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
        self.DEFAULT_EXERCISES = {
            "back": ["–ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è", "–¢—è–≥–∞ —à—Ç–∞–Ω–≥–∏", "–¢—è–≥–∞ –≥–∞–Ω—Ç–µ–ª–∏"],
            "chest": ["–ñ–∏–º —à—Ç–∞–Ω–≥–∏", "–ñ–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π", "–†–∞–∑–≤–æ–¥–∫–∞ –≥–∞–Ω—Ç–µ–ª–µ–π"],
            "legs": ["–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è", "–°—Ç–∞–Ω–æ–≤–∞—è —Ç—è–≥–∞", "–í—ã–ø–∞–¥—ã"],
            "arms": ["–ñ–∏–º —à—Ç–∞–Ω–≥–∏ —É–∑–∫–∏–º —Ö–≤–∞—Ç–æ–º", "–ü–æ–¥—ä–µ–º –≥–∞–Ω—Ç–µ–ª–µ–π –Ω–∞ –±–∏—Ü–µ–ø—Å", "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π –∂–∏–º"],
            "shoulders": ["–ñ–∏–º –ê—Ä–Ω–æ–ª—å–¥–∞", "–ú–∞—Ö–∏ –≥–∞–Ω—Ç–µ–ª—è–º–∏", "–ü–æ–¥—ä–µ–º –ø–µ—Ä–µ–¥–Ω–∏—Ö –¥–µ–ª—å—Ç"],
            "abs": ["–°–∫—Ä—É—á–∏–≤–∞–Ω–∏—è", "–ü–ª–∞–Ω–∫–∞", "–û–±—Ä–∞—Ç–Ω—ã–µ —Å–∫—Ä—É—á–∏–≤–∞–Ω–∏—è"]
        }

        # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.user_data_storage = {}

    def get_user_data(self, user_id: int) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.user_data_storage:
            self.user_data_storage[user_id] = {
                "history": [],
                "current_workout": None,
                "mode": None
            }
        return self.user_data_storage[user_id]

    def main_menu_keyboard(self) -> ReplyKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        keyboard = [
            [KeyboardButton("üèãÔ∏è‚Äç‚ôÇÔ∏è –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")],
            [KeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫")],
            [KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞")]
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –±–æ—Ç! üèãÔ∏è\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=self.main_menu_keyboard()
        )

    async def show_workout_history(self, update: Update, user_id: int) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
        history = self.db.get_user_history(user_id)
        if not history:
            await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö.")
            return
        
        msg = "üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:\n\n"
        current_workout_id = None
        for row in history:
            if row[0] != current_workout_id:
                date_str = datetime.strptime(row[2], "%Y-%m-%d %H:%M:%S").strftime("%d.%m.%Y %H:%M")
                msg += f"üí™ {row[1]}\nüóì {date_str}\n"
                current_workout_id = row[0]
            msg += f" - {row[3]}: {row[4]}x{row[5]} @ {row[6]} –∫–≥\n"
        
        await update.message.reply_text(msg, reply_markup=self.main_menu_keyboard())

    async def show_exercise_stats(self, update: Update, user_id: int, exercise_name: str) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é"""
        stats = self.db.get_exercise_stats(user_id, exercise_name)
        if not stats:
            await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è.")
            return

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        dates = [datetime.strptime(row[0], "%Y-%m-%d %H:%M:%S") for row in stats]
        weights = [row[1] for row in stats]

        # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
        plt.figure(figsize=(10, 5))
        plt.plot(dates, weights, marker='o', linestyle='-')
        plt.title(f'–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é "{exercise_name}"')
        plt.xlabel('–î–∞—Ç–∞')
        plt.ylabel('–í–µ—Å (–∫–≥)')
        plt.grid(True)
        plt.xticks(rotation=45)
        plt.tight_layout()

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –≤ –±—É—Ñ–µ—Ä
        buf = BytesIO()
        plt.savefig(buf, format='png')
        plt.close()
        buf.seek(0)

        # –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        max_weight = max(weights)
        avg_weight = sum(weights) / len(weights)
        total_workouts = len(stats)

        stats_text = (
            f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ '{exercise_name}':\n"
            f"üìå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å: {max_weight} –∫–≥\n"
            f"üìå –°—Ä–µ–¥–Ω–∏–π –≤–µ—Å: {avg_weight:.1f} –∫–≥\n"
            f"üìå –í—Å–µ–≥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {total_workouts}"
        )

        await update.message.reply_photo(photo=buf, caption=stats_text)

    async def handle_new_exercise(self, update: Update, user_data: Dict, text: str) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"""
        current = user_data["current_workout"]
        
        if "new_exercise" not in current:
            current["new_exercise"] = text
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ö–æ–¥–æ–≤:")
            return True
            
        elif "sets" not in current:
            try:
                current["sets"] = int(text)
                await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π:")
                return True
            except ValueError:
                await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
                return False
                
        elif "reps" not in current:
            try:
                current["reps"] = int(text)
                await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å (–≤ –∫–≥):")
                return True
            except ValueError:
                await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
                return False
                
        elif "weight" not in current:
            try:
                current["weight"] = float(text)
                
                # –î–æ–±–∞–≤–ª—è–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
                if "exercises" not in current:
                    current["exercises"] = []
                
                current["exercises"].append({
                    "name": current["new_exercise"],
                    "sets": current["sets"],
                    "reps": current["reps"],
                    "weight": current["weight"]
                })
                
                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                for key in ["new_exercise", "sets", "reps", "weight"]:
                    if key in current:
                        del current[key]
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –≤—ã–±–æ—Ä—É –≥—Ä—É–ø–ø—ã –º—ã—à—Ü
                keyboard = [[KeyboardButton(group)] for group in self.MUSCLE_GROUPS.values()]
                keyboard.append([KeyboardButton("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")])
                keyboard.append([KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")])
                
                await update.message.reply_text(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –º—ã—à—Ü:",
                    reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                )
                return True
            except ValueError:
                await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
                return False
        return False

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        text = update.message.text
        user_id = update.effective_user.id
        username = update.effective_user.username or str(user_id)
        user_data = self.get_user_data(user_id)

        try:
            if text == "üèãÔ∏è‚Äç‚ôÇÔ∏è –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É":
                keyboard = [[KeyboardButton(group)] for group in self.MUSCLE_GROUPS.values()]
                keyboard.append([KeyboardButton("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")])
                keyboard.append([KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")])
                await update.message.reply_text(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –º—ã—à—Ü:",
                    reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                )
                return

            elif text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
                user_data["current_workout"] = None
                await update.message.reply_text("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=self.main_menu_keyboard())
                return

            elif text == "üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É":
                if user_data.get("current_workout") and user_data["current_workout"].get("exercises"):
                    workout = user_data["current_workout"]
                    self.db.save_workout(
                        user_id=user_id,
                        username=username,
                        muscle_group=workout["group"],
                        exercises=workout["exercises"]
                    )
                    await update.message.reply_text("‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!", reply_markup=self.main_menu_keyboard())
                else:
                    await update.message.reply_text("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π.", reply_markup=self.main_menu_keyboard())
                user_data["current_workout"] = None
                return

            elif text == "üìú –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫":
                await self.show_workout_history(update, user_id)
                return

            elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞":
                stats = self.db.get_exercise_stats(user_id, "%")  # –°–∏–º–≤–æ–ª % –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –ª—é–±—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
                if not stats:
                    await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.", reply_markup=self.main_menu_keyboard())
                    return

                user_data["mode"] = "stats_choose_exercise"
                exercises = {ex[0] for ex in self.db.get_user_history(user_id, 1000)}
                keyboard = [[KeyboardButton(ex)] for ex in exercises]
                keyboard.append([KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")])
                await update.message.reply_text(
                    "–í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
                    reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
                return

            elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
                user_data["mode"] = None
                await update.message.reply_text("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=self.main_menu_keyboard())
                return

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            if user_data.get("mode") == "stats_choose_exercise":
                await self.show_exercise_stats(update, user_id, text)
                return

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –º—ã—à—Ü
            muscle_group = next((key for key, val in self.MUSCLE_GROUPS.items() if val == text), None)
            if muscle_group:
                exercises = self.DEFAULT_EXERCISES[muscle_group]
                keyboard = [[KeyboardButton(ex)] for ex in exercises]
                keyboard.append([KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—ë —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ")])
                keyboard.append([KeyboardButton("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")])
                keyboard.append([KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")])

                if user_data["current_workout"] is None:
                    user_data["current_workout"] = {
                        "group": self.MUSCLE_GROUPS[muscle_group],
                        "exercises": [],
                        "muscle_key": muscle_group
                    }
                else:
                    user_data["current_workout"]["group"] = self.MUSCLE_GROUPS[muscle_group]
                    user_data["current_workout"]["muscle_key"] = muscle_group

                await update.message.reply_text(
                    f"–í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–∞ {text}:",
                    reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
                return

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–≤–æ–µ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
            if text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—ë —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ":
                await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:")
                return

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
            if user_data.get("current_workout"):
                if await self.handle_new_exercise(update, user_data, text):
                    return

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
                if "muscle_key" in user_data["current_workout"]:
                    muscle_key = user_data["current_workout"]["muscle_key"]
                    if text in self.DEFAULT_EXERCISES[muscle_key]:
                        user_data["current_workout"]["new_exercise"] = text
                        await update.message.reply_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {text}\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ö–æ–¥–æ–≤:")
                        return

            await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.")

        except Exception as e:
            logging.error(f"Error in handle_message: {e}")
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        application = ApplicationBuilder().token(self.token).build()
        
        application.add_handler(CommandHandler('start', self.start))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        application.run_polling()

    def __del__(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å –∑–∞–∫—Ä—ã—Ç–∏–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î"""
        if hasattr(self, 'db'):
            self.db.close()


if __name__ == '__main__':
    bot = WorkoutBot(token='7758120985:AAHOid2LvrvC2-u4kZdhnifQTLMcybn_e0o')
    bot.run()
